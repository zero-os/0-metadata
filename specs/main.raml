#%RAML 1.0
title: "meta DB"
description: API of the meta DB, used to keep information on filesystem information
version: 0.0.1
mediaType: application/json
documentation:
  - title: Extended documentation
content: 

types:
    Node:
        description: A node is the basic 
        properties:
            kind: # (dir, file, symlink)
                type: int 
            id: 
                type: int64
            parent: 
                type: int64
            name:
                type: string
            size:
                type: int64
            created:
                type: timestamp
            modified:
                type: timestamp
            accessed:
                type: timestamp
            location: # ??? maybe the name/URL of the storage that keep info for this node
                type: string
            contents: # ??? something that can reference an ID in an in/ex-ternal storage 
                type: string
            uname: # ??? informative only 
                type: string 
            gname: # ??? informative only
                type: string 
            rights: # (read, write/delete) No need of admin
                type: int 


/contents/{path:*}/:
    displayName: contents   
    get:
        responses:
        200:
            description: returns directory contents, files and dirs non recursive
            body:
                application-json:
                example:
                    response: 
                    {
                        kind: filelist|content
                        filelist: [
                            nodename, nodename, nodename ... # Don't know how to express a list
                        ],
                        contents: []byte
                    }
        404:
            description: {path} does not exists

/show/{path:*}/:
    description: returns metadata contents of object at {path} dir or file
    displayName: show_metadata
    get:
        responses:
            200:
            description: returns all metadata on of the directory
            body:
                application-json:
                    example:
                        response: {
                            kind: dir|file|symlink
                            path: "/usr/share/doc"
                            name: "manpages"
                            size: 2340
                            ....
                        }
            404:
                description: path doesnt exists

/search/{path:*}/:
    description: Search for {aName} starting at {path}
    displayName: dir_search
    get:
        queryParameters:
            aName: 
                type: string
                description: name of the object we want to search
            recurse:
                type: boolean
                description: true or false if we want the search to be recursive
    responses:
        200:
            description: object  {aName} exists
                body:
                    application-json: 
                        example:
                            response: {
                                names: [ "/usr/bin/vim", "/usr/local/bin/vim"]
                            }
        404:
            description: object {aName} not found
        400:
            description: {path} not a dir

/create/{path:*}/:
    description: creates an object at {path} dir or file
    displayName: object_create
    post:
        queryParameters:
            force: 
                type: boolean 
                description: forces the creation of intermediate parents
        request:
            application-json:
                example:
                    request: {
                        kind: dir
                        rights:
                        ...
                    }
        responses:
            200:
                description: object created dir or file
            404:
                description: path doesn't exist, can't create object

/link/{path:*}
    description: create {Path} as a link of {path:*}
    displayName: link
    post:
        queryParameters:
            Path:
                type: string
                description: path of linked object
        responses:
            200:
                description: created {Path} link
            404:
                description: {path} or {Path} does not exists
            400:
                description: Incompatible {path} and {Path} types, 

/copy/{path:*}
    description: Copy the contents of object at {path} into the object at {Path}
    displayName: copy
    post:
        queryParameters:
            Path:
                type: string 
                description: Destination Path
        responses:
            200:
                description: {Path} copied
            404:
                description: {path} or {Path} does not exists
            400:
                description: Incompatible {path} and {Path} types, 

/move/{path:*}          
    description: Moves/renames the contents of {path} into {Path}
    displayName: move
    put:
        queryParameters:
            Path:
                type: string
                description: New name of {path}
        responses:
            200:
                description: directory moved
            404:
                description: {path} or {Path} does not exists
            400:
                description: Incompatible {path} and {Path} types, 

/update/{path:*}
    description: updates the object at {path}
    displayName: update
    put:
        request:
            application-json: 
                example:
                    request: {
                        size:
                        acl:
                        ...
                    }
        responses:
            200:
                description: {path} updated
            404:
                description: {path} does not exists
            
/{path:*}
    description: Deletes the object at {path},  if is a dir it must be empty
    displayName: del
    delete:
        queryParameters:
            force:
                type: boolean
                description: for non empty directories, the action is forced 
        responses:
            200:
                description: {path] deleted
                body: # Returns the metadata of the deleted directory
                    application-json: 
                        example:
                            response: {
                                name: "vim"
                                size: 34000
                                ....
                            }
            404:
                description: {path} does not exists

