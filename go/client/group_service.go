// DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.
package client

import (
	"encoding/json"
	"net/http"

	"github.com/zero-os/0-metadata/go/client/goraml"
	"github.com/zero-os/0-metadata/go/client/types"
)

type GroupService service

// Delete group
func (s *GroupService) DeleteGroup(id string, headers, queryParams map[string]interface{}) (*http.Response, error) {
	var err error

	resp, err := s.client.doReqNoBody("DELETE", s.client.BaseURI+"/group/"+id, headers, queryParams)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	return resp, err
}

// Get group, id=int
func (s *GroupService) GetGroup(id string, headers, queryParams map[string]interface{}) (types.Group, *http.Response, error) {
	var err error
	var respBody200 types.Group

	resp, err := s.client.doReqNoBody("GET", s.client.BaseURI+"/group/"+id, headers, queryParams)
	if err != nil {
		return respBody200, nil, err
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case 200:
		err = json.NewDecoder(resp.Body).Decode(&respBody200)
	default:
		err = goraml.NewAPIError(resp, nil)
	}

	return respBody200, resp, err
}

// Update group
func (s *GroupService) UpdateGroup(id string, body types.Group, headers, queryParams map[string]interface{}) (types.Group, *http.Response, error) {
	var err error
	var respBody200 types.Group

	resp, err := s.client.doReqWithBody("POST", s.client.BaseURI+"/group/"+id, &body, headers, queryParams)
	if err != nil {
		return respBody200, nil, err
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case 200:
		err = json.NewDecoder(resp.Body).Decode(&respBody200)
	default:
		err = goraml.NewAPIError(resp, nil)
	}

	return respBody200, resp, err
}

// Get a list of groups
func (s *GroupService) ListGroup(headers, queryParams map[string]interface{}) ([]types.Group, *http.Response, error) {
	var err error
	var respBody200 []types.Group

	resp, err := s.client.doReqNoBody("GET", s.client.BaseURI+"/group", headers, queryParams)
	if err != nil {
		return respBody200, nil, err
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case 200:
		err = json.NewDecoder(resp.Body).Decode(&respBody200)
	default:
		err = goraml.NewAPIError(resp, nil)
	}

	return respBody200, resp, err
}
